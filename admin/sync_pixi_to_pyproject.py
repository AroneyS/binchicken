#!/usr/bin/env python3
"""
Sync dependencies from pixi.lock/pixi.toml to pyproject.toml and output requirements.txt.
- Only updates the [project].dependencies section in pyproject.toml.
- requirements.txt is written for pip/CI use, with exact versions.

Usage: python admin/sync_pixi_to_pyproject.py
"""
import toml
import subprocess
import json
from pathlib import Path

ROOT = Path(__file__).parent.parent
PIXITOML = ROOT / "pixi.toml"
PYPROJECT = ROOT / "pyproject.toml"
REQS = ROOT / "admin" / "requirements.txt"

# Get declared dependencies from pixi.toml
with open(PIXITOML, "r") as f:
    pixi_data = toml.load(f)

to_parse = pixi_data['feature']['main']['dependencies']
declared_conda = set(pkg.lower() for pkg in to_parse.keys())

# Get installed package versions from 'pixi list --json'
result = subprocess.run([
    "pixi", "list", "--json"
], capture_output=True, text=True, check=True)
pixi_list = json.loads(result.stdout)
pixi_list = {pkg["name"].lower(): pkg["version"] for pkg in pixi_list if 'is_editable' not in pkg or pkg['is_editable'] is not True}

# Update pyproject.toml [project].dependencies
# with open(PYPROJECT) as f:
#     pyproject = toml.load(f)
# pyproject["project"]["dependencies"] = [f"{k}=={pixi_list[k]}" for k in declared_conda if k in pixi_list]
# with open(PYPROJECT, "w") as f:
#     toml.dump(pyproject, f)

# Write requirements.txt
with open(REQS, "w") as f:
    f.write("# This file was autogenerated by sync_pixi_to_pyproject.py - do not change manually.\n")
    for k in declared_conda:
        if k in pixi_list:
            v = pixi_list[k]
            if v == "0.0.0":
                line = f"{k}\n"
            else:
                line = f"{k}=={v}\n"
            f.write(line)
print(f"Updated pyproject.toml and requirements.txt with {len(declared_conda)} dependencies from pixi.")
